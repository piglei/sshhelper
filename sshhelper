#!/usr/bin/env python
# coding: utf-8
"""
sshhelper
~~~~~~~~~

A simple tool make life better when you have a lot of hosts.

:Author: piglei2007@gmail.com
"""

VERSION = [1, 0, 1]

import re
import os
import sys
import struct
import fcntl
import termios
import signal
import socket
import pexpect
from collections import defaultdict
from configobj import ConfigObj

TIME_WAIT = 60

# EXIT_CODES
TIMEOUT = 1
CANNOT_CONNECT = 2
REFUSED = 3
ARGS_ERROR = 99
NOT_EXIST = 100

def int_get(raw, default=None):
    try:
        return int(raw)
    except:
        return default

CONFIG_TMPL = '''[jump_host]
# Jump host is used when the machine you want to ssh into is 
# not available, it's useful for server which doesn't have a public
# IP address.
#
# host = 127.0.0.1
# username = "username"
# password = "password"
# port = 22

[hosts]
# Add your hosts here.
# 
# Available arguments
# ~~~~~~~~~~~~~~~~~~~
# 
# - username
# - password
# - summary
# - `short_name`, short name, you can use this name to log in instead of IP address.
# - `port`, default to 22
# - `ssh_args`, extra args , default to an empty string
# - `commands`, a list of cmds you want to execute when
#   logged into the host. use a basestring if it is a 
#   regular command. and a 2-items list/tuple if it need
#   to expect for the first item and then send the second
# - `enable_jump`, if set to True, will use the defined jump_host, default to False
#
# [[127.0.0.1]]
# username = "username"
# password = "password"
# short_name = "laptop"
# summary = "my laptop"
# port = 22
# ssh_args = "-i your.pem"
# commands = cd /data, ls
# enable_jump = False
'''

class ConfigLoader(object):
    """
    Loder for config file
    """
    def __init__(self, config_path):
        self.config_path = config_path
        self.hosts = []
        self.jump_host = None
    
    def load(self):
        """Load config from config file"""
        if not os.path.exists(config_path):
            open(config_path, 'w').write(CONFIG_TMPL)
        config = ConfigObj(infile=config_path)
        self.hosts = config.get("hosts", {})
        self.jump_host = config.get("jump_host")

def get_usage(hosts=[]):
    """
    Return Usage string
    ~~~~~~~~~~~~~~~~~~~
    """
    ret = []
    for k in sorted(hosts.keys()):
        short_name = hosts[k].get('short_name')
        ret.append( "        %-20s # %s%s" % (
            k, 
            '[SN: %s] ' % short_name if short_name else '',
            hosts[k].get("summary", "")
        ))
    hosts_str = "\n".join(ret)

    usage = '''
Usage:

    %s (hostname or short name)
    
    You can type a full ip address like 192.168.11.3 or a part of it
    such as `11.3` to ssh into it.

    If short_name is configured, you can use that name too.
    
    - modify %s to add your hosts.
    - available hosts:

%s
    ''' % (sys.argv[0], config_path, hosts_str if hosts else "no available hosts")
    return usage

class SSHhandler(object):
    """
    The Main SSHhandler
    ~~~~~~~~~~~~~~~~~~~
    """
    jump_host = None 
    ssh_newkey = 'Are you sure you want to continue connecting'      
    port_default = 22
    dot = re.compile(r'[#$] ')

    def __init__(self, host, username, password, port=22, ssh_args="", is_jump=False, short_name='', 
                 enable_jump=False):
        self.host = host
        self.username = username
        self.password = password
        self.enable_jump = enable_jump
        self.port = int_get(port, self.port_default)
        assert self.port > 0 and self.port < 65536, "port number must between 0 and 65535"
        self.is_jump = is_jump
        self.ssh_args = ssh_args
        self.visible_name = '%s[SN: %s]' % (host, short_name) if short_name else host

    def login(self):
        print "Start login into %s, please wait..." % self.visible_name
        if self._need_jump():
            print "%s is not availble directly." % self.host
            if self.is_jump or not self.jump_host:
                sys.exit(CANNOT_CONNECT)
            
            print "Using the jump server %s." % self.jump_host["host"]
            jump = SSHhandler(is_jump=True, **self.jump_host)
            jump.login()
            self.child = jump.child
       
        ssh_command = "/usr/bin/ssh %s -l %s -p %s %s" % (self.ssh_args, self.username, self.port, self.host)
        if not hasattr(self, "child"):
            self.child = pexpect.spawn(ssh_command)
            # add signal when changing parent.size
            signal.signal(signal.SIGWINCH, self._set_term_size)
        else:
            #self.child.expect(self.dot)
            self.child.sendline(ssh_command)
        
        # several situations
        #   1. timeout
        #   2. host is unknown
        #   3. need password
        #   4. no need password
        #   5. Connection refused
        i = self.child.expect([
            pexpect.TIMEOUT,
            self.ssh_newkey,
            '(?i)password: ',
            self.dot, 
            "(?i)Connection refused",
            pexpect.EOF
        ])
        # timeout
        if i == 0:
            self._connection_failed(TIMEOUT)
        if i == 3:
            return
        if i == 4:
            self._connection_failed(REFUSED)
        if i == 5:
            self._connection_failed(REFUSED)
        # accept the public key
        if i == 1:
            self.child.sendline("yes")
            i = self.child.expect([pexpect.TIMEOUT, 'password: '])
            if i == 0:
                self._connection_failed(TIMEOUT)
        self.child.sendline(self.password)

    def execute(self, cmd):
        """
        execute a command
        """
        if isinstance(cmd, str):
            cmd = [cmd,]
        if len(cmd) == 2:
            print "expecting %s" % cmd[0]
            self.child.expect([cmd[0], self.dot])
        else:
            self.child.expect(self.dot)
        print "executing %s" % cmd[-1]
        self.child.sendline(cmd[-1])

    def interact(self):
        # resize it first
        self._set_term_size(None, None)
        print '\n'.join(self.child.before.split('\n')[:-1])
        self.child.interact()

    def _need_jump(self):
        """
        use `ping` to check if the host is available now
        """
        if self.enable_jump:
            return True
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(TIME_WAIT)
            sock.connect((self.host, self.port))
            sock.close()
        except:
            return True
        return False

    def _connection_failed(self, exit_code=TIMEOUT):
        print "Could not ssh into %s" % self.host
        print self.child.before, self.child.after
        sys.exit(exit_code)

    def _set_term_size(self, sig, data):
        """Set the term size to parent's size"""
        s = struct.pack("HHHH", 0, 0, 0, 0)
        a = struct.unpack('hhhh', fcntl.ioctl(sys.stdout.fileno(), termios.TIOCGWINSZ , s))
        self.child.setwinsize(a[0],a[1])


def autocomplete(key, hosts=[]):
    """
    Autocomplete for an input.
    """
    result = defaultdict(list)
    for ip in sorted(hosts.keys()):
        host = hosts[ip]
        short_name = host.get('short_name')
        for match in (ip, short_name):
            if not match:
                continue
            if key == match:
                result[3].append(ip)
            elif match.startswith(key) or match.endswith(key):
                result[2].append(ip)
            elif key in match:
                result[1].append(ip)
    return result[3] or result[2] or result[1] or []


if __name__ == "__main__":
    # This is the default config path
    config_path = os.path.join(os.environ["HOME"], ".sshhelper_config")
    config = ConfigLoader(config_path)
    config.load()

    usage = get_usage(hosts=config.hosts)

    if not len(sys.argv) == 2:
        print usage
        sys.exit(ARGS_ERROR)
    
    hosts = autocomplete(sys.argv[1], config.hosts)
    if not hosts:
        print "%s is not a valid ip address." % sys.argv[1]
        print usage
        sys.exit(NOT_EXIST)

    if len(hosts) != 1:
        print "Cann't ssh because %s matches multi hosts.\n    %s" % (sys.argv[1], "\n    ".join(hosts))
        sys.exit(ARGS_ERROR)

    host = hosts[0]
    values = config.hosts.get(host)
    # Set jump host
    SSHhandler.jump_host = config.jump_host
    enable_jump = values.get("enable_jump", False)

    ssh = SSHhandler(
        host,
        values["username"],
        values.get("password", ""),
        port = values.get("port"),
        ssh_args=values.get("ssh_args", ""),
        short_name=values.get('short_name', ''),
        enable_jump=enable_jump
    )

    try:
        ssh.login()
    except KeyboardInterrupt, e:
        print "Canceling ..."
        sys.exit(1)

    commands = values.get("commands", [])
    for cmd in commands:
        # if cmd contains a ",", split it into a list
        if "," in cmd:
            cmd = cmd.split(",")
        ssh.execute(cmd)
    try:
        ssh.interact()
    except OSError, e:
        pass


